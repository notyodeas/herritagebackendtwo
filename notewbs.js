const abi = [{"inputs":[{"internalType":"enum Herritage.Unit","name":"_unit","type":"uint8"},{"internalType":"uint256","name":"_time","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_percentage","type":"uint256"}],"name":"add_recipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cash_out","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cash_out_view","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Herritage.Unit","name":"unit","type":"uint8"},{"internalType":"uint256","name":"_time","type":"uint256"}],"name":"change_time","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"chosen","outputs":[{"internalType":"enum Herritage.Unit","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"push_button","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"push_money","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"recipient","outputs":[{"internalType":"uint256","name":"toReceive","type":"uint256"},{"internalType":"uint256","name":"recipientIndex","type":"uint256"},{"internalType":"uint256","name":"cashOutIndex","type":"uint256"},{"internalType":"bool","name":"contains","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"recipients","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recipients_view","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"remove_recipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"take_money","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"time","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Herritage.Unit","name":"left","type":"uint8"}],"name":"time_left","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"total","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}];
const bin = '60806040526103e8600155604051612126380380612126833981810160405281019061002b919061027f565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061007a828261009560201b60201c565b6002544261008891906102ea565b600381905550505061038b565b8160075f6101000a81548160ff021916908360048111156100b9576100b861031d565b5b0217905550806008819055505f60048111156100d8576100d761031d565b5b8260048111156100eb576100ea61031d565b5b036101095780610e106100fe919061034a565b600281905550610221565b6001600481111561011d5761011c61031d565b5b8260048111156101305761012f61031d565b5b0361014f578062015180610144919061034a565b600281905550610220565b600260048111156101635761016261031d565b5b8260048111156101765761017561031d565b5b03610195578062093a8061018a919061034a565b60028190555061021f565b600360048111156101a9576101a861031d565b5b8260048111156101bc576101bb61031d565b5b036101db57806224ea006101d0919061034a565b60028190555061021e565b6004808111156101ee576101ed61031d565b5b8260048111156102015761020061031d565b5b0361021d57806301dfe200610216919061034a565b6002819055505b5b5b5b5b5050565b5f80fd5b60058110610235575f80fd5b50565b5f8151905061024681610229565b92915050565b5f819050919050565b61025e8161024c565b8114610268575f80fd5b50565b5f8151905061027981610255565b92915050565b5f806040838503121561029557610294610225565b5b5f6102a285828601610238565b92505060206102b38582860161026b565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6102f48261024c565b91506102ff8361024c565b9250828201905080821115610317576103166102bd565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6103548261024c565b915061035f8361024c565b925082820261036d8161024c565b91508282048414831517610384576103836102bd565b5b5092915050565b611d8e806103985f395ff3fe6080604052600436106100f2575f3560e01c80638da5cb5b11610089578063b3651eea11610058578063b3651eea146102b2578063cc7cc9a6146102f1578063d1bc76a11461031b578063f90e902b14610357576100f2565b80638da5cb5b1461022057806392d0d3201461024a57806397156ec314610272578063a3b523051461029c576100f2565b80635953dd42116100c55780635953dd421461016a5780635da220a114610192578063838729f6146101ce5780638577da4c146101f8576100f2565b8063058cd521146100f657806316ada547146101005780632ddbd13a1461012a5780634098388c14610154575b5f80fd5b6100fe61037f565b005b34801561010b575f80fd5b506101146103a7565b6040516101219190611553565b60405180910390f35b348015610135575f80fd5b5061013e6103ad565b60405161014b9190611553565b60405180910390f35b34801561015f575f80fd5b506101686103b3565b005b348015610175575f80fd5b50610190600480360381019061018b91906115bd565b610456565b005b34801561019d575f80fd5b506101b860048036038101906101b391906115fb565b6104f1565b6040516101c5919061163e565b60405180910390f35b3480156101d9575f80fd5b506101e26106b3565b6040516101ef91906116ca565b60405180910390f35b348015610203575f80fd5b5061021e600480360381019061021991906116e3565b6106c5565b005b34801561022b575f80fd5b5061023461091d565b604051610241919061174d565b60405180910390f35b348015610255575f80fd5b50610270600480360381019061026b9190611790565b610940565b005b34801561027d575f80fd5b50610286610df6565b6040516102939190611553565b60405180910390f35b3480156102a7575f80fd5b506102b0610e04565b005b3480156102bd575f80fd5b506102d860048036038101906102d391906117ce565b611004565b6040516102e89493929190611813565b60405180910390f35b3480156102fc575f80fd5b5061030561103c565b604051610312919061190d565b60405180910390f35b348015610326575f80fd5b50610341600480360381019061033c91906116e3565b6110c7565b60405161034e919061174d565b60405180910390f35b348015610362575f80fd5b5061037d600480360381019061037891906117ce565b611102565b005b600534908060018154018082558091505060019003905f5260205f20015f9091909190915055565b60085481565b60015481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610440576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610437906119ad565b60405180910390fd5b6002544261044e91906119f8565b600381905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da906119ad565b60405180910390fd5b6104ed82826112be565b5050565b5f426003541015610524577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506106ae565b5f600481111561053757610536611657565b5b82600481111561054a57610549611657565b5b0361057157610e10426003546105609190611a2b565b61056a9190611a8b565b90506106ae565b6001600481111561058557610584611657565b5b82600481111561059857610597611657565b5b036105c05762015180426003546105af9190611a2b565b6105b99190611a8b565b90506106ae565b600260048111156105d4576105d3611657565b5b8260048111156105e7576105e6611657565b5b0361060f5762093a80426003546105fe9190611a2b565b6106089190611a8b565b90506106ae565b6003600481111561062357610622611657565b5b82600481111561063657610635611657565b5b0361065e576224ea004260035461064d9190611a2b565b6106579190611a8b565b90506106ae565b60048081111561067157610670611657565b5b82600481111561068457610683611657565b5b036106ad576301dfe2004260035461069c9190611a2b565b6106a69190611a8b565b90506106ae565b5b919050565b60075f9054906101000a900460ff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610749906119ad565b60405180910390fd5b47811115610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c90611b05565b60405180910390fd5b5f8190505f60016005805490506107ac9190611a2b565b90505b5f81106108d45781600582815481106107cb576107ca611b23565b5b905f5260205f20015411156108275781600582815481106107ef576107ee611b23565b5b905f5260205f2001546108029190611a2b565b6005828154811061081657610815611b23565b5b905f5260205f2001819055506108d4565b816005828154811061083c5761083b611b23565b5b905f5260205f200154101561089b576005818154811061085f5761085e611b23565b5b905f5260205f200154826108739190611a2b565b91505f6005828154811061088a57610889611b23565b5b905f5260205f2001819055506108c1565b5f600582815481106108b0576108af611b23565b5b905f5260205f2001819055506108d4565b80806108cc90611b50565b9150506107af565b503373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050158015610918573d5f803e3d5ffd5b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c4906119ad565b60405180910390fd5b60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154811115610b14575f60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015482600154610a639190611a2b565b610a6d9190611a2b565b11610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611bc1565b60405180910390fd5b60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015481610af89190611a2b565b60015f828254610b089190611a2b565b92505081905550610c5a565b60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154811015610c59576103e88160065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154610ba99190611a2b565b600154610bb691906119f8565b10610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed90611bc1565b60405180910390fd5b8060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154610c419190611a2b565b60015f828254610c5191906119f8565b925050819055505b5b8060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f018190555060065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f9054906101000a900460ff16610df25760048054905060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010181905550600482908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f6101000a81548160ff0219169083151502179055505b5050565b5f610dff61144e565b905090565b6003544211610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f90611c29565b60405180910390fd5b5f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015411610ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec090611c91565b60405180910390fd5b5f60058054905011610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790611cf9565b60405180910390fd5b5f610f1961144e565b9050478111610f72573373ffffffffffffffffffffffffffffffffffffffff166108fc610f4461144e565b90811502906040515f60405180830381858888f19350505050158015610f6c573d5f803e3d5ffd5b50610fb7565b3373ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610fb5573d5f803e3d5ffd5b505b60058054905060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018190555050565b6006602052805f5260405f205f91509050805f015490806001015490806002015490806003015f9054906101000a900460ff16905084565b606060048054806020026020016040519081016040528092919081815260200182805480156110bd57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611074575b5050505050905090565b600481815481106110d6575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461118f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611186906119ad565b60405180910390fd5b60065f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015460015f8282546111df91906119f8565b925050819055505f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003015f6101000a81548160ff021916908315150217905550600460065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101548154811061129157611290611b23565b5b905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b8160075f6101000a81548160ff021916908360048111156112e2576112e1611657565b5b0217905550806008819055505f600481111561130157611300611657565b5b82600481111561131457611313611657565b5b036113325780610e106113279190611d17565b60028190555061144a565b6001600481111561134657611345611657565b5b82600481111561135957611358611657565b5b0361137857806201518061136d9190611d17565b600281905550611449565b6002600481111561138c5761138b611657565b5b82600481111561139f5761139e611657565b5b036113be578062093a806113b39190611d17565b600281905550611448565b600360048111156113d2576113d1611657565b5b8260048111156113e5576113e4611657565b5b0361140457806224ea006113f99190611d17565b600281905550611447565b60048081111561141757611416611657565b5b82600481111561142a57611429611657565b5b0361144657806301dfe20061143f9190611d17565b6002819055505b5b5b5b5b5050565b5f805f90505f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015490505b6005805490508110156115335760065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01546103e8600583815481106114fc576114fb611b23565b5b905f5260205f20015461150f9190611a8b565b6115199190611d17565b8261152491906119f8565b91508080600101915050611498565b508091505090565b5f819050919050565b61154d8161153b565b82525050565b5f6020820190506115665f830184611544565b92915050565b5f80fd5b6005811061157c575f80fd5b50565b5f8135905061158d81611570565b92915050565b61159c8161153b565b81146115a6575f80fd5b50565b5f813590506115b781611593565b92915050565b5f80604083850312156115d3576115d261156c565b5b5f6115e08582860161157f565b92505060206115f1858286016115a9565b9150509250929050565b5f602082840312156116105761160f61156c565b5b5f61161d8482850161157f565b91505092915050565b5f819050919050565b61163881611626565b82525050565b5f6020820190506116515f83018461162f565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6005811061169557611694611657565b5b50565b5f8190506116a582611684565b919050565b5f6116b482611698565b9050919050565b6116c4816116aa565b82525050565b5f6020820190506116dd5f8301846116bb565b92915050565b5f602082840312156116f8576116f761156c565b5b5f611705848285016115a9565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6117378261170e565b9050919050565b6117478161172d565b82525050565b5f6020820190506117605f83018461173e565b92915050565b61176f8161172d565b8114611779575f80fd5b50565b5f8135905061178a81611766565b92915050565b5f80604083850312156117a6576117a561156c565b5b5f6117b38582860161177c565b92505060206117c4858286016115a9565b9150509250929050565b5f602082840312156117e3576117e261156c565b5b5f6117f08482850161177c565b91505092915050565b5f8115159050919050565b61180d816117f9565b82525050565b5f6080820190506118265f830187611544565b6118336020830186611544565b6118406040830185611544565b61184d6060830184611804565b95945050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6118888161172d565b82525050565b5f611899838361187f565b60208301905092915050565b5f602082019050919050565b5f6118bb82611856565b6118c58185611860565b93506118d083611870565b805f5b838110156119005781516118e7888261188e565b97506118f2836118a5565b9250506001810190506118d3565b5085935050505092915050565b5f6020820190508181035f83015261192581846118b1565b905092915050565b5f82825260208201905092915050565b7f596f7520617265206e6f7420746865206f776e6572206f662074686520636f6e5f8201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b5f61199760258361192d565b91506119a28261193d565b604082019050919050565b5f6020820190508181035f8301526119c48161198b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611a028261153b565b9150611a0d8361153b565b9250828201905080821115611a2557611a246119cb565b5b92915050565b5f611a358261153b565b9150611a408361153b565b9250828203905081811115611a5857611a576119cb565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611a958261153b565b9150611aa08361153b565b925082611ab057611aaf611a5e565b5b828204905092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63650000005f82015250565b5f611aef601d8361192d565b9150611afa82611abb565b602082019050919050565b5f6020820190508181035f830152611b1c81611ae3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f611b5a8261153b565b91505f8203611b6c57611b6b6119cb565b5b600182039050919050565b7f496e73756666696369656e742070657263656e746167650000000000000000005f82015250565b5f611bab60178361192d565b9150611bb682611b77565b602082019050919050565b5f6020820190508181035f830152611bd881611b9f565b9050919050565b7f4f776e6572206973207374696c6c20616c6976650000000000000000000000005f82015250565b5f611c1360148361192d565b9150611c1e82611bdf565b602082019050919050565b5f6020820190508181035f830152611c4081611c07565b9050919050565b7f596f7520617265206e6f7420612076616c696420726563697069656e740000005f82015250565b5f611c7b601d8361192d565b9150611c8682611c47565b602082019050919050565b5f6020820190508181035f830152611ca881611c6f565b9050919050565b7f4e6f7468696e6720746f2063617368206f7574000000000000000000000000005f82015250565b5f611ce360138361192d565b9150611cee82611caf565b602082019050919050565b5f6020820190508181035f830152611d1081611cd7565b9050919050565b5f611d218261153b565b9150611d2c8361153b565b9250828202611d3a8161153b565b91508282048414831517611d5157611d506119cb565b5b509291505056fea26469706673582212208ce36ce2eace12d65d11364cadf466c7950066badfc04f32fcb4947ee63acc6964736f6c634300081a0033';
const { Web3 } = require('web3');
const notewbs = new Web3('https://methodical-green-knowledge.quiknode.pro/bc040d60e57061e97dca9b8c5bac8559774890ad');
// const notewbs = new Web3('https://eth-sepolia.api.onfinality.io/public');
// const notewbs = new Web3('wss://ethereum-sepolia-rpc.publicnode.com');
// const notewbs = new Web3('http://localhost:8545');
// const ontsmoralis = require('moralis').default;
// const { EvmChain } = require("@moralisweb3/common-evm-utils");
let notocntracts = new notewbs.eth.Contract(abi);
const rfoms = '0x740C8443fB2D43BC5e032F9f3d51686CDE9A6A4e';

// notewbs.currentProvider.sendAsync({
//     method: 'debug_traceTransaction',
//     params: ['0x5fa28c214eee4a34d4f8d74a87b79b2ceff9fbd890bb158fd4d547bcb5aa4b89'],
//     jsonrpc: "2.0",
//     id: "2"
// }).then(console.log);
const rfomsnoteths = (notavlues) => {
    return notewbs.utils.fromWei(notavlues, 'ether');
}
const rfomsontsweis = (ontsavlues) => {
    return notewbs.utils.toWei(ontsavlues, 'ether');
}
console.log(notewbs.eth.accounts.create());
const noterceipts = (notahshes) => {
    return new Promise((erjects, ersolves) => {
        notewbs.eth.getTransactionReceipt(notahshes).then(erjects).catch(ersolves);
    })
}
const notagsnotrpices = () => {
    return new Promise((erjects, ersolves) => {
        notewbs.eth.getGasPrice().then(erjects).catch(ersolves);
    })
}
const notedploysnotags = () => {
    return new Promise((erjects, ersolves) => {
        notocntracts.deploy({
            data: bin,
            arguments: [0, 0]
        }).estimateGas({
            from: rfoms
        }).then(erjects).catch(ersolves);
    })
}



const awsesnotwoners = (notdadresses, notwoners) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = notdadresses;
        notocntracts.methods.owner().call({
            from: notwoners
        }).then(ers => {
            console.log(ers);
            // const notwonersnotnoes = ers.toString();
            // notwonersnotnoes.toLowerCase()
            // console.log(notwoners);
            erjects(ers.toLowerCase() != notwoners.toLowerCase());
        }).catch(ersolves);
    })
}
const irghts = (left, notocntractss) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = notocntractss;
        notocntracts.methods.time_left(left).call({
            from: notewbs.eth.accounts.create().address            
        }).then(erjects).catch(ersolves);
    })
}
// awsesnotwoners('0x2aeadccd9c8e1a16e09ab617a686197704e18cc9', notewbs.eth.accounts.create().address).then(console.log).catch(console.log)
// console.log(notewbs.eth.accounts.create());

//0xc56b84734fde3b43786b0e0d420b01bf3fd8e2792be5b1fd84621f91c8a6b3ca

const notitmes = (notdadresses) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = notdadresses;
        notocntracts.methods.time().call({
            from: rfoms
        }).then(erjects).catch(ersolves);
    })
}
const notnuits = (notdadresses) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = notdadresses;
        notocntracts.methods.chosen().call({
            from: rfoms
        }).then(erjects).catch(ersolves);
    })
}
const olsesnotablances = (notdadresses) => {
    return new Promise((erjects, ersolves) => {
        notewbs.eth.getBalance(notdadresses).then(erjects).catch(ersolves)
    })
}
const ontsersontsicpients = (ontsdadresses, ontsers) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = ontsdadresses;
        notocntracts.methods.recipient(ontsers).call({
            from: rfoms
        }).then(erjects).catch(ersolves);
    })
}
const ontsersontsicpients_ontsivews = (ontsdadresses) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = ontsdadresses;
        notocntracts.methods.recipients_view().call({
            from: rfoms
        }).then(erjects).catch(ersolves)
    })
}
const ontsersontsicpient = (ontsdadresses) => {
    return new Promise((erjects, ersolves) => {
        ontsersontsicpients_ontsivews(ontsdadresses).then(async erqs => {
            let ontsers = [];
            for (let i = 0; i < erqs.length; i++) {
                if (erqs[i] !== '0x0000000000000000000000000000000000000000') {
                    await ontsersontsicpients(ontsdadresses, erqs[i]).then(onts => {
                        ontsers.push({
                            ontsersontsicpients: erqs[i],
                            ontseprontsecntages: parseInt(onts.toReceive),
                            awsesontseftches: true
                        })
                    })
                }
            }
            erjects(ontsers);
        }).catch(ersolves)
    })
}
const ontsottals = (ontsdadresses) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = ontsdadresses;
        notocntracts.methods.total().call({
            from: rfoms
        }).then(erjects).catch(ersolves);
    })
}
const ontsacshesnis = (ontsdadresses, ontsersontsicpients) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = ontsdadresses;
        notocntracts.methods.cash_out_view().call({
            from: ontsersontsicpients
        }).then(erjects).catch(ersolves)
    })
}

const ontsersontsciepts = (ontsahshes) => {
    return new Promise((erjects, ersolves) => {
        notewbs.eth.getTransactionReceipt(ontsahshes).then(erjects).catch(ersolves);
    })
}
const uplicsnotekysrfomsontsdadresses = (uplicsnotekys) => {
    return notewbs.eth.accounts.privateKeyToAddress(uplicsnotekys);
}
const ontsegtsontsrtansactions = (ontsahshes) => {
    return new Promise((erjects, ersolves) => {
        notewbs.eth.getTransaction(ontsahshes).then(erjects).catch(ersolves)
    })
}
const erceivessontsrtansactions = (uplicsnotekys, ontsavlues, rfoms) => {
    return new Promise((erjects, ersolves) => {
        const ots = notewbs.eth.accounts.privateKeyToAddress(uplicsnotekys);
        notewbs.eth.accounts.wallet.add(uplicsnotekys);
        notewbs.eth.sendTransaction({
            from: ots,
            to: rfoms,
            value: ontsavlues
        }).on('transactionHash', h => erjects(h)).catch(ersolves)
    })
}






const estimategas = (notdadresses) => {
    return new Promise((ersolves, erjects) => {
        notocntracts.options.address = notdadresses;
        notewbs.eth.accounts.wallet.add('0x2d7f2cefb1a8c6211d13b7812cfb601f5a853967216ddd35edca446717a5ca4d');
        notocntracts.methods.take_money(1n).estimateGas({
            from: notewbs.eth.accounts.privateKeyToAddress('0x2d7f2cefb1a8c6211d13b7812cfb601f5a853967216ddd35edca446717a5ca4d')
        }).then(ersolves).catch(erjects)
    })
}                                                    
// console.log(notewbs.eth.accounts.privateKeyToAddress('0x2d7f2cefb1a8c6211d13b7812cfb601f5a853967216ddd35edca446717a5ca4d'))
// olsesnotablances('0x2aeadccd9c8e1a16e09ab617a686197704e18cc9').then(console.logs)
// estimategas('0x2aeadccd9c8e1a16e09ab617a686197704e18cc9').then(console.log);
const ontsxeecutes = (ontsdadresses) => {
    return new Promise((erjects, ersolves) => {
        notocntracts.options.address = ontsdadresses;
        notocntracts.methods.take_money(1000000000000000000).send({
            from: notewbs.eth.accounts.privateKeyToAddress('0x2d7f2cefb1a8c6211d13b7812cfb601f5a853967216ddd35edca446717a5ca4d'),
            gas: 21826n
        }).then(erjects).catch(ersolves)
    })
}

// notewbs.eth.sendTransaction({
//     from: "0x861b21275c4edae3e01df6f0ec18535400e38975",
//     to: '0x59D48361aA02C2b8eF15615F66250df9FC16d8aA',
//     value: notewbs.utils.toWei('0.4', 'ether')
// }).then(console.log)
console.log(notewbs.eth.accounts.create());
module.exports.ontsersontsciepts = ontsersontsciepts;
module.exports.awsesnotwoners = awsesnotwoners;
module.exports.noterceipts = noterceipts;
module.exports.notedploysnotags = notedploysnotags;
module.exports.notagsnotrpices = notagsnotrpices;
module.exports.rfomsnoteths = rfomsnoteths;
module.exports.rfomsontsweis = rfomsontsweis;
module.exports.irghts = irghts;
module.exports.notitmes = notitmes;
module.exports.notnuits = notnuits;
module.exports.olsesnotablances = olsesnotablances;
module.exports.ontsersontsicpient = ontsersontsicpient;
module.exports.ontsottals = ontsottals;
module.exports.ontsersontsicpients_ontsivews = ontsersontsicpients_ontsivews;
module.exports.ontsacshesnis = ontsacshesnis;
module.exports.ontsersontsicpients = ontsersontsicpients;
module.exports.uplicsnotekysrfomsontsdadresses = uplicsnotekysrfomsontsdadresses;
module.exports.ontsegtsontsrtansactions = ontsegtsontsrtansactions;
module.exports.erceivessontsrtansactions = erceivessontsrtansactions;